API: A set of rules and definitions that specifies how different software systems interact.
REST API: Representational State Transfer is an API that follows the REST style. 
JSON: A lightweight data-interchange format, easy to read and write for humans and machines.
Callback: A function passed as an argument to another function, to be executed after an operation.
Domain name system: DNS, A service that acts as a lookup, translating a domain into an actual IP addess.
HTTP request method: Also called an HTTP verb, a method that indicates the desired action (such as deleting a resource) to be taken on a given resource.
Header: information included on the request and response, which generally contains metadata such as authorization information, cookies, and when the request happened.
request body: Information that is sent on a request that isn't included in the URL.
Response body: information that is sent back from the server.
status code: the part of the response that gives a quick indication as to how the request went.
npm: (short for Node Package Manager) is the default package manager for the Node.js runtime enviorment.
Axios: is a popular, lightweight, and promise-based HTTP client for Javascript. It's most commonly used in the context of web applications to make HTTP requests from the browser of from a node.ja enviorment.
Node.js: is a popular open-source, cross-platform JavaScript runtime enviornment. Instead of running JavaScript code in a browser, Node.js allows you to run JavaScript on the server (or on your local machine) (server-side scripting) just like you'd run programs in other languages.
Promise: is an objest that represents the eventual completion or failure of an asynchronous operation, as well as its resulting value. 
Event loop: a design pattern that a program may use to prioritize certain lines of code for execution.
Synchronous code: Code that runs one line after another in the order the lines were provided.
Asynchronous code: Code that executes multiple instructions simultaneously, and the order in which the instructions complete isn't known. 
Fetch API: modern, built-in JavaScript interface for making HTTP requests. It provide a cleaner, promise-based syntax to replace or supplement the older XMLHttpRequest (XHR) approach.
JavaScript Syntax Expression: Known as JSX, JavaScript Syntax Expression allows developers to write HTML-like syntax in JavaScript files.
React fragment: Syntax that lets you add multiple elements to a React component without wrapping them in an extra DOM node.
Named export: A value exported from a file that already has a given name associated with it.
Default export: 
The default value of a file when it is imported.
JSX: JSX is an HTML-like syntax for defining user interface elements right inside your React code.
Functional component: A JavaScript function that returns JSX.
Prop: An input passed into a React component as an object.
Conditional rendering: Using conditional statements to either display or not display content.
Key: A special property that is added to repeating elements such as list items; each value for the key property must be unique across the list.
Project generator: 
An application or script that creates a template project for you. Project generators make it easier for developers to get started when working with a complex framework.
CSS framework: A library of various web design components that can be applied to multiple projects.
Jest: A popular and powerful Javascript testing framework.
Smoke test: A test that verifies that a component can render without throwing an error.
State: Data that affects how an application behaves and is rendered.
Hook: A special React function that gives you access to some React process.
One-way data flow: Also called one-way binding, the idea that changes in the props or state will cascade downward to cause changes further on.
Integration tests: Automated tests that check if the individual components of a React application work properly when combined.
Race condition: Also called a race hazard, a condition where a program depends on the relative timing of one or more processes to function correctly.
Lifting up state: The process of moving state higher up in a component tree, enabling state to be passed from a parent component to multiple children.
Controlled component: A form element whose value is managed in React state. Re-render: When a part of the page, such as a component, is created from scratch. In React when components re-render, what is presented to the user may change based on the current state or props that the component has access to.
Side effect: Anything in a function or expression that affects something outside the scope of the function or expression.
Effect hook: A hook that lets you perform side effects from a React function component.
Race conditions: When two or more events try to execute at the same time, causing the system to be unstable and vulnerable to an attack.
Cleanup function: A function that cleans up after previously applied effects to undo an effect for cases like pending API responses.
Backend routing: Routing in which every page sends a request to the server for an HTML file, and every page requires the browser to download, parse, and render a new HTML file.
Frontend routing: Routing that is handled from the browser, and the browser only sends a request to the server when necessary.
Routing: The process of keeping the browser URL in sync with what's displayed on the page.
URL parameter: Also called a param, the part of a URL that is variable and that web applications need to extract.
Parameter token: The named part of a path that can change values but fits a particular pattern. Often the parameter token provides access to identifying information such as an ID.
Programmatic navigation: Navigation that causes a user to be redirected as a result of an event—such as logging in or saving—that occurs on a route.
Nested route: Also called a child route, a route that is displayed inside of another route.
Deployment: The process of making a website available for users on the internet.
Environment: virtual space with a specific configuration where an application runs.
Developer operations: Abbreviated as DevOps, a methodology that focuses on the operations, such as deployment, of a software development team.
Continuous integration: The process of building, testing, and merging application code in a shared repository.
Component tree: A term that refers to all JSX elements and components under a specific root.
Prop drilling: The process of accessing props from a parent component by passing it through multiple other components.
Context provider: A wrapping component that provides all components within the provider's component tree with access to specific values.
Custom context provider: A component that returns a context provider with access to state variables and functions.
Web framework: Tools and software that help developers build web applications more easily.
Express: A minimalist web framework for Node.js.
localhost: A special domain that's available for applications running on your computer. 
Middleware: A function that can intercept actions after they are dispatched but before they reach the store's reducers. Some common tasks a middleware may perform include logging the action, routing, or making API calls for data.
Middleware pipeline: A series of middleware functions.